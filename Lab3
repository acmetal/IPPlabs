public partial class Form1 : Form, IView, IModelObserver
    {

        IController controller;

        public event ViewHandler<IView> changed;


        // View will set the associated controller, this is how view is linked to the controller.
        public void setController(IController cont)
        {
            controller = cont;
        }
        
        public Form1()
        {
            InitializeComponent();
        }

        // when the user clicks the button just ask the controller to increment the value
        // do not worry about how and where it is done
        private void button1_Click(object sender, EventArgs e)
        {
            controller.incvalue();
        }

        // This event is implementation from IModelObserver which will be invoked by the
        // Model when there is a change in the value with ModelEventArgs which is derived
        // from the EventArgs. The IModel object is the one from which invoked this.
        public void valueIncremented(IModel m, ModelEventArgs e)
        {
            textBox1.Text = "" + e.newval;
        }

        // When this event is raised can mean the user must have changed the value.
        // Invoke the view changed event in the controller which will call the method
        // in IModel to set the new value, the user can enter a new value and the
        // incrementing starts from that value onwards
        private void textBox1_Leave(object sender, EventArgs e)
        {
            try
            {
                changed.Invoke(this, new ViewEventArgs(int.Parse(textBox1.Text)));
            }
            catch (Exception)
            {
                MessageBox.Show("Please enter a valid number");
            }

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }


    }
    
    //////////////////////////////////////////////////////////////////////////////////
    
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            // Create the View, Model and Controller object yourself and comment out the Application.Run with a new form
            // Create a controller object with the concreate implementation IncController and pass the view and model.
            // Controller will store its associated model and view inside the constructor
            // View which is inside the form will tie the controller automatically who was associated in this step
            // Run the view object created by you which is infact the form
            Form1 view = new Form1();
            IModel mdl = new IncModel();
            IController cnt = new IncController(view,mdl);
            Application.Run(view);
        }
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////
    
   // The Icontroller supports only one functionality that is to increment the value
    public interface IController
    {
        void incvalue();
    }

    public class IncController : IController
    {
        IView view;
        IModel model;

        // The controller which implements the IController interface ties the view and model 
        // together and attaches the view via the IModelInterface and adds the event
        // handler to the view_changed function. The view ties the controller to itself.
        public IncController(IView v, IModel m)
        {
            view = v;
            model = m;
            view.setController(this);
            model.attach((IModelObserver)view);
            view.changed += new ViewHandler<IView>(this.view_changed);
        }

        // event which gets fired from the view when the users changes the value
        public void view_changed(IView v, ViewEventArgs e)
        {
            model.setvalue(e.value);
        }

        // This does the actual work of getting the model do the work
        public void incvalue()
        {
            model.increment();
        }

    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////
    
    public delegate void ModelHandler<IModel>(IModel sender, ModelEventArgs e);

    // The ModelEventArgs class which is derived from th EventArgs class to 
    // be passed on to the controller when the value is changed
    public class ModelEventArgs : EventArgs
    {
        public int newval;
        public ModelEventArgs(int v) 
        { 
            newval = v; 
        }
    }

    // The interface which the form/view must implement so that, the event will be
    // fired when a value is changed in the model.
    public interface IModelObserver
    {
        void valueIncremented(IModel model, ModelEventArgs e);
    }

    // The Model interface where we can attach the function to be notified when value
    // is changed. An actual data manipulation function increment which increments the value
    // A setvalue function which sets the value when users changes the textbox
    public interface IModel
    {
        void attach(IModelObserver imo);
        void increment();
        void setvalue(int v);
    }

    public class IncModel : IModel
    {
        public event ModelHandler<IncModel> changed;
        int value;

        // implementation of IModel interface set the initial value to 0
        public IncModel() 
        { 
            value = 0; 
        }

        // Set value function to set the value in case if the user directly changes the value
        // in the textbox and the view change event fires in the controller
        public void setvalue(int v) 
        { 
            value = v; 
        } 

        // Change the value and fire the event with the new value inside ModelEventArgs
        // This will invoke the function valueIncremented in the model and will be displayed
        // in the textbox subsequently
        public void increment() 
        { 
            value++; 
            changed.Invoke(this, new ModelEventArgs(value));
        }

        // Attach the function which is implementing the IModelObserver so that it can be
        // notified when a value is changed
        public void attach(IModelObserver imo) 
        { 
            changed += new ModelHandler<IncModel>(imo.valueIncremented);
        }

    }
    
    ////////////////////////////////////////////////////////////////////////////////////////
    
    public delegate void ViewHandler<IView>(IView sender, ViewEventArgs e);

        // The event arguments class that will be used while firing the events
        // for this program, we have only one value which the user changed.
        public class ViewEventArgs: EventArgs 
        {
            public int value;
            public ViewEventArgs(int v) { value = v; }
        }


        // Currently, the interface only contains the method to set the controller to which
        // it is tied. The rest of the view related code is implemented in the form.
        public interface IView
        {
            event ViewHandler<IView> changed;
            void setController(IController cont);
        }
